import{_ as t,D as i,c as n,j as o,a as e,I as s,w as r,a4 as a,o as d}from"./chunks/framework.D5tr8Gic.js";const c="/imgs/assets/cmd-install.gif",x=JSON.parse('{"title":"环境安装","description":"","frontmatter":{},"headers":[],"relativePath":"course/install-env.md","filePath":"zh/course/install-env.md","lastUpdated":1725890410000}'),p={name:"course/install-env.md"},h=a(`<h1 id="环境安装" tabindex="-1">环境安装 <a class="header-anchor" href="#环境安装" aria-label="Permalink to &quot;环境安装&quot;">​</a></h1><blockquote><p>视频教程 <a href="https://www.bilibili.com/video/BV1MN411Q7a2/" target="_blank" rel="noreferrer">链接</a></p></blockquote><h2 id="开发环境依赖" tabindex="-1">开发环境依赖 <a class="header-anchor" href="#开发环境依赖" aria-label="Permalink to &quot;开发环境依赖&quot;">​</a></h2><p>开发环境依赖Golang和CEF构建好的二进制框架。 如果开发完到生产包后，此时除了Golang编译好的二进制执行程序，还需要捆绑CEF和liblcl。</p><p>下面列表是开发环境安装选项</p><table tabindex="0"><thead><tr><th>名称</th><th>平台</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>Golang</td><td>ALL</td><td>是</td><td>Go语言开发环境</td></tr><tr><td>CEF, liblcl</td><td>ALL</td><td>是</td><td>CEF框架</td></tr><tr><td>NSIS</td><td>Windows</td><td>否</td><td>Windows安装包制作工具</td></tr><tr><td>UPX</td><td>ALL</td><td>否</td><td>执行文件压缩工具</td></tr><tr><td>7z</td><td>Windows, Linux</td><td>否</td><td>CEF框架压缩工具</td></tr></tbody></table><h2 id="开发环境安装的3种方式" tabindex="-1">开发环境安装的3种方式 <a class="header-anchor" href="#开发环境安装的3种方式" aria-label="Permalink to &quot;开发环境安装的3种方式&quot;">​</a></h2><h3 id="_1、自动安装完整开发环境-在线-推荐" tabindex="-1">1、自动安装完整开发环境 - <span style="color:#2ba9f1;">在线 推荐</span> <a class="header-anchor" href="#_1、自动安装完整开发环境-在线-推荐" aria-label="Permalink to &quot;1、自动安装完整开发环境 - &lt;span style=&quot;color: #2ba9f1;&quot;&gt;在线 推荐&lt;/span&gt;&quot;">​</a></h3><h4 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h4><p>使用energy命令行工具安装开发环境, 它通过网络下载CEF和liblcl, CEF二进制包在CEF官方构建仓库, 因此在国外可能下载失败, 如果失败请参考离线安装.</p><h4 id="获取-energy-命令行工具" tabindex="-1">获取 energy 命令行工具 <a class="header-anchor" href="#获取-energy-命令行工具" aria-label="Permalink to &quot;获取 energy 命令行工具&quot;">​</a></h4><ul><li>获取方式 一 预编译命令行工具 <a href="/course/cli-download">下载地址</a></li></ul><blockquote><p>该方式不需要手动安装Golang环境, energy 命令行工具自动安装Golang. 该方式可跳过方式二</p></blockquote><ul><li>获取方式 二 自行编译命令行工具</li></ul><blockquote><p>需要你自己安装<a href="https://golang.google.cn/dl/" target="_blank" rel="noreferrer">Golang</a>环境</p><blockquote><ol><li>克隆项目 <code>git clone https://github.com/energye/energy.git</code></li><li>下载依赖 <code>go mod tidy</code></li><li>进入energy/cmd/energy目录 <code>cd energy/cmd/energy</code></li></ol><p>执行命令 &quot;go install&quot; 安装命令行工具</p><p><code>go install</code></p></blockquote></blockquote><h4 id="安装开发环境" tabindex="-1">安装开发环境 <a class="header-anchor" href="#安装开发环境" aria-label="Permalink to &quot;安装开发环境&quot;">​</a></h4><p>执行命令</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">energy install</span></span></code></pre></div><p>直接在（windows -&gt; cmd）(linux or macosx -&gt; terminal) 中执行</p><blockquote><p>linux 需要安装gtk, 默认energy依赖是GTK3. GTK安装命令</p></blockquote><ul><li>GTK3 <code>sudo apt-get install libgtk-3-dev</code></li><li>GTK2 <code>sudo apt-get install libgtk2.0-dev</code></li></ul><p><a href="/course/cli-use-instructions">关于 energy cli 使用</a></p><hr><h3 id="_2、自动安装开发环境-离线" tabindex="-1">2、自动安装开发环境 - <span style="color:#2ba9f1;">离线</span> <a class="header-anchor" href="#_2、自动安装开发环境-离线" aria-label="Permalink to &quot;2、自动安装开发环境 - &lt;span style=&quot;color: #2ba9f1;&quot;&gt;离线&lt;/span&gt;&quot;">​</a></h3><h4 id="说明-1" tabindex="-1">说明 <a class="header-anchor" href="#说明-1" aria-label="Permalink to &quot;说明&quot;">​</a></h4><blockquote><p>提供给无网络或在线安装下载失败的用户</p></blockquote><h4 id="工具获取" tabindex="-1">工具获取 <a class="header-anchor" href="#工具获取" aria-label="Permalink to &quot;工具获取&quot;">​</a></h4><blockquote><p>参考: <span style="color:#2ba9f1;">方式1-在线安装</span> 使用命令行工具自动安装Energy框架的所有依赖，适用: Window、Linux、MacOSX</p></blockquote><h4 id="手动下载二进制框架" tabindex="-1">手动下载二进制框架 <a class="header-anchor" href="#手动下载二进制框架" aria-label="Permalink to &quot;手动下载二进制框架&quot;">​</a></h4><blockquote><p>获取最新版本CEF和对应liblcl动态库 <a href="/course/download-version">下载链接</a></p><ol><li>在energy命令行执行目录(同级)创建框架下载目录<code>EnergyFrameworkDownloadCache</code></li><li>将下载的CEF和liblcl压缩包复制到<code>EnergyFrameworkDownloadCache</code>目录中</li></ol><blockquote><p><span style="color:red;">注意</span>: 将CEF压缩包文件名里的<code>+</code>加号改为<code></code>空格, 除此之外不能修改CEF和liblcl压缩包文件名</p></blockquote><ol start="3"><li>执行安装命令</li></ol></blockquote><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">energy install</span></span></code></pre></div><hr><h3 id="_3、手动安装开发环境" tabindex="-1">3、手动安装开发环境 <a class="header-anchor" href="#_3、手动安装开发环境" aria-label="Permalink to &quot;3、手动安装开发环境&quot;">​</a></h3><h4 id="说明-2" tabindex="-1">说明 <a class="header-anchor" href="#说明-2" aria-label="Permalink to &quot;说明&quot;">​</a></h4><blockquote><p>该方式完全手动安装开发环境，把命令行工具安装开发环境做的事情我们用手动操作一遍。</p></blockquote><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>使用压缩包文件</span></span>
<span class="line"><span>CEF</span></span>
<span class="line"><span>   1. Windows和Linux只用到CEF的Release和Resources目录内的文件</span></span>
<span class="line"><span>   2. MacOSX只用到了Release目录内文件</span></span>
<span class="line"><span>Energy</span></span>
<span class="line"><span>   liblcl.xx文件</span></span>
<span class="line"><span>ENERGY_HOME </span></span>
<span class="line"><span>   开发环境变量</span></span>
<span class="line"><span>   ENERGY_HOME=/to/path/CEFFramework</span></span></code></pre></div><hr><h4 id="版本下载" tabindex="-1"><a href="/course/download-version">版本下载</a> <a class="header-anchor" href="#版本下载" aria-label="Permalink to &quot;[版本下载](/course/download-version)&quot;">​</a></h4><hr><h4 id="windows和linux" tabindex="-1">Windows和Linux <a class="header-anchor" href="#windows和linux" aria-label="Permalink to &quot;Windows和Linux&quot;">​</a></h4>`,40),u=a("<ol><li>新建文件夹ChromiumDemo(文件夹名称自己随意取)</li><li>CEF 提取Release和Resources目录‘内’文件到ChromiumDemo文件夹</li><li>Energy 提取动态链接库到ChromiumDemo文件夹</li><li>最终的目录结构</li></ol><blockquote><p>ChromiumDemo文件夹目录</p><blockquote><p>locales - 文件夹</p><p>cef_sandbox.lib - 文件</p><p>chrome_100_percent.pak - 文件</p><p>chrome_200_percent.pak - 文件</p><p>chrome_elf.dll - 文件</p><p>d3dcompiler_47.dll - 文件</p><p>icudtl.dat - 文件</p><p>libcef.dll - 文件</p><p>libcef.lib - 文件</p><p>libEGL.dll - 文件</p><p>libGLESv2.dll - 文件</p><p>liblcl.dll - 文件</p><p>resources.pak - 文件</p><p>snapshot_blob.bin - 文件</p><p>v8_context_snapshot.bin - 文件</p><p>vk_swiftshader.dll - 文件</p><p>vk_swiftshader_icd.json - 文件</p><p>vulkan-1.dll - 文件</p></blockquote></blockquote>",2),b=a('<h4 id="macos-x" tabindex="-1">MacOS X <a class="header-anchor" href="#macos-x" aria-label="Permalink to &quot;MacOS X&quot;">​</a></h4><blockquote><p>下载CEF和Energy对应版本的动态链接库压缩包</p><ol><li>新建文件夹ChromiumDemo(文件夹名称自己随意取)</li><li>CEF 提取Release目录‘内’文件到ChromiumDemo文件夹</li><li>Energy 提取动态链接库到ChromiumDemo文件夹</li><li>最终的目录结构</li></ol><blockquote><p>ChromiumDemo文件夹目录</p><blockquote><p>Chromium Embedded Framework.framework - 文件夹</p><p>cef_sandbox.a - 文件</p><p>liblcl.dylib - 文件</p></blockquote></blockquote></blockquote><h5 id="mac-m1-m2" tabindex="-1">Mac M1 M2 <a class="header-anchor" href="#mac-m1-m2" aria-label="Permalink to &quot;Mac M1 M2&quot;">​</a></h5><blockquote><p>对于 Mac ARM(M1, M2)架构, 开发环境和 Mac AMD64 一样 在Mac ARM Go需要使用交叉编译, 设置Go的编译环境为 amd64, 和CGO支持 通过 Rosetta2 兼容运行AMD架构应用 需要额外安装</p><ol><li>GCC工具链 <code>brew install gcc</code>, 还可能需要安装<code>xcode-select --install</code></li><li>Rosetta2 <a href="https://support.apple.com/zh-cn/HT211861" target="_blank" rel="noreferrer">参考链接</a></li></ol><p>编译环境设置</p><ul><li>交叉环境: <code>GOARCH=amd64</code></li><li>开启CGO: <code>CGO_ENABLED=1</code></li></ul></blockquote><h4 id="环境配置" tabindex="-1">环境配置 <a class="header-anchor" href="#环境配置" aria-label="Permalink to &quot;环境配置&quot;">​</a></h4><blockquote><p>ENERGY_HOME 环境变量</p><blockquote><p>ENERGY_HOME 是 Energy 的开发环境变量, 开发时运行应用会从环境变量查找框架目录 也可不配置环境变量, 通过Go代码手动指定框架目录 <code>app.SetFrameworkDirPath</code></p></blockquote></blockquote><h2 id="命令行自动安装效果图" tabindex="-1">命令行自动安装效果图 <a class="header-anchor" href="#命令行自动安装效果图" aria-label="Permalink to &quot;命令行自动安装效果图&quot;">​</a></h2><h3 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h3><p><img src="'+c+'" alt="Description"></p>',9);function m(k,_,q,g,E,f){const l=i("font");return d(),n("div",null,[h,o("blockquote",null,[o("p",null,[e("下载"),s(l,{color:"red"},{default:r(()=>[e("CEF和Energy")]),_:1}),e("对应版本的动态链接库压缩包")]),u]),b])}const y=t(p,[["render",m]]);export{x as __pageData,y as default};
