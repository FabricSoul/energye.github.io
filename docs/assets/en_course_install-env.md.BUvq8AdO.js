import{_ as i,D as r,c as s,j as e,a as n,I as t,w as l,a4 as a,o as d}from"./chunks/framework.D5tr8Gic.js";const C=JSON.parse('{"title":"Install Environment","description":"","frontmatter":{},"headers":[],"relativePath":"en/course/install-env.md","filePath":"en/course/install-env.md","lastUpdated":1725890410000}'),c={name:"en/course/install-env.md"},m=a(`<h1 id="install-environment" tabindex="-1">Install Environment <a class="header-anchor" href="#install-environment" aria-label="Permalink to &quot;Install Environment&quot;">​</a></h1><h1 id="video-tutorials" tabindex="-1">Video Tutorials <a class="header-anchor" href="#video-tutorials" aria-label="Permalink to &quot;Video Tutorials&quot;">​</a></h1><blockquote><p><a href="https://www.bilibili.com/video/BV1MN411Q7a2/" target="_blank" rel="noreferrer">Link</a></p></blockquote><h1 id="development-environment-dependency" tabindex="-1">Development Environment Dependency <a class="header-anchor" href="#development-environment-dependency" aria-label="Permalink to &quot;Development Environment Dependency&quot;">​</a></h1><table tabindex="0"><thead><tr><th>Name</th><th>Platform</th><th>illustrate</th></tr></thead><tbody><tr><td>Golang</td><td>ALL</td><td>Golang Development Environment</td></tr><tr><td>CEF, liblcl</td><td>ALL</td><td>CEF Framework</td></tr><tr><td>NSIS</td><td>Windows</td><td>Windows Installation package production tool</td></tr><tr><td>UPX</td><td>All</td><td>Execute file compression tool</td></tr><tr><td>7z</td><td>Windows</td><td>CEF Framework compression tool</td></tr></tbody></table><h1 id="development-environment-installation-3-ways" tabindex="-1">Development environment installation -3 ways <a class="header-anchor" href="#development-environment-installation-3-ways" aria-label="Permalink to &quot;Development environment installation -3 ways&quot;">​</a></h1><h2 id="_1、automatically-install-the-complete-development-environment-online-recommendation" tabindex="-1">1、Automatically install the complete development environment - <span style="color:blue;">Online recommendation</span> <a class="header-anchor" href="#_1、automatically-install-the-complete-development-environment-online-recommendation" aria-label="Permalink to &quot;1、Automatically install the complete development environment - &lt;span style=&quot;color: blue;&quot;&gt;Online recommendation&lt;/span&gt;&quot;">​</a></h2><h3 id="obtain-the-energy-command-line-tool" tabindex="-1">Obtain the Energy command-line tool <a class="header-anchor" href="#obtain-the-energy-command-line-tool" aria-label="Permalink to &quot;Obtain the Energy command-line tool&quot;">​</a></h3><ul><li>Obtaining Method 1: Precompiled Command Line Tool <a href="https://energy.yanghy.cn/course/100/1694511322285207" target="_blank" rel="noreferrer">Download</a></li></ul><blockquote><p>This method does not require manual installation of the Golang environment, and the energy command-line tool automatically installs Golang This method can skip Method 2</p></blockquote><ul><li>Obtaining Method 2: Self Compiling Command Line Tools</li></ul><blockquote><p>You need to install it yourself<a href="https://golang.google.cn/dl/" target="_blank" rel="noreferrer">Golang</a></p><blockquote><ol><li>Clone Project <code>git clone https://github.com/energye/energy.git</code></li><li>Download Dependency <code>go mod tidy</code></li><li>cd energy/cmd/energy <code>cd energy/cmd/energy</code></li></ol><p>Execute the command <code>go install</code> to install the command-line tool</p><p><code>go install</code></p></blockquote></blockquote><h3 id="installation-and-development-environment" tabindex="-1">Installation and development environment <a class="header-anchor" href="#installation-and-development-environment" aria-label="Permalink to &quot;Installation and development environment&quot;">​</a></h3><p>Execute command</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">energy install .</span></span></code></pre></div><p>run in（windows -&gt; cmd）(linux or macosx -&gt; terminal)</p><blockquote><p>linux GTK needs to be installed, and the default energy dependency is GTK3 GTK install command:</p><blockquote><p>GTK3, <code>sudo apt-get install libgtk-3-dev</code> GTK2, <code>sudo apt-get install libgtk2.0-dev</code></p></blockquote></blockquote><hr><h2 id="_2、automatic-installation-development-environment-offline" tabindex="-1">2、Automatic installation development environment - <span style="color:blue;">offline</span> <a class="header-anchor" href="#_2、automatic-installation-development-environment-offline" aria-label="Permalink to &quot;2、Automatic installation development environment - &lt;span style=&quot;color: blue;&quot;&gt;offline&lt;/span&gt;&quot;">​</a></h2><h3 id="tool-acquisition" tabindex="-1">Tool acquisition <a class="header-anchor" href="#tool-acquisition" aria-label="Permalink to &quot;Tool acquisition&quot;">​</a></h3><blockquote><p>refer : <span style="color:blue;">Obtaining Method 1</span> Automatically install all dependencies of the Energy framework using command-line tools, applicable: Window、Linux、MacOSX Provided to users who have no network or have failed online installation and download</p></blockquote><h3 id="manually-downloading-binary-frameworks" tabindex="-1">Manually downloading binary frameworks <a class="header-anchor" href="#manually-downloading-binary-frameworks" aria-label="Permalink to &quot;Manually downloading binary frameworks&quot;">​</a></h3><blockquote><p>Obtain the latest version of CEF and corresponding liblcl dynamic library <a href="https://energy.yanghy.cn/course/6342d92c401bfe4d0cdf6065/6364c5c2a749ba01d04ff485" target="_blank" rel="noreferrer">Download</a></p><ol><li>Create a framework download directory by executing the directory (at the same level) on the energy command line<code>EnergyFrameworkDownloadCache</code></li><li>Copy the downloaded CEF and liblcl compressed packages to<code>EnergyFrameworkDownloadCache</code>dir</li></ol><blockquote><p><span style="color:red;">attention</span>: Cannot modify CEF and liblcl compressed package file names</p></blockquote><ol start="3"><li>run install command</li></ol></blockquote><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">energy install .</span></span></code></pre></div><hr><h2 id="_3、manually-installing-the-development-environment" tabindex="-1">3、Manually installing the development environment <a class="header-anchor" href="#_3、manually-installing-the-development-environment" aria-label="Permalink to &quot;3、Manually installing the development environment&quot;">​</a></h2><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Require compressed package file</span></span>
<span class="line"><span>CEF</span></span>
<span class="line"><span>   1. Windows and Linux only use files in the Release and Resources directories of CEF</span></span>
<span class="line"><span>   2. MacOSX only uses files in the Release directory</span></span>
<span class="line"><span>Energy</span></span>
<span class="line"><span>   liblcl.xx file</span></span>
<span class="line"><span>ENERGY_HOME </span></span>
<span class="line"><span>   Configure development environment variables</span></span>
<span class="line"><span>   ENERGY_HOME=/to/path/CEFFramework</span></span></code></pre></div><hr><h3 id="download-link" tabindex="-1"><a href="https://energy.yanghy.cn/course/100/6364c5c2a749ba01d04ff485" target="_blank" rel="noreferrer">Download Link</a> <a class="header-anchor" href="#download-link" aria-label="Permalink to &quot;[Download Link](https://energy.yanghy.cn/course/100/6364c5c2a749ba01d04ff485)&quot;">​</a></h3><hr><h3 id="windows-linux" tabindex="-1">Windows &amp; Linux <a class="header-anchor" href="#windows-linux" aria-label="Permalink to &quot;Windows &amp; Linux&quot;">​</a></h3>`,31),p=a("<ol><li>Create a new folder ChromiumDemo (choose the folder name yourself)</li><li>CEF: Extract the &#39;internal&#39; files from the Release and Resources directories to the ChromiumDemo folder</li><li>Energy: Extract the dynamic link library to the ChromiumDemo folder</li><li>Final directory structure</li></ol><blockquote><p>Different versions may have different files</p><blockquote><p>locales - folder</p><p>cef_sandbox.lib - file</p><p>chrome_100_percent.pak - file</p><p>chrome_200_percent.pak - file</p><p>chrome_elf.dll - file</p><p>d3dcompiler_47.dll - file</p><p>icudtl.dat - file</p><p>libcef.dll - file</p><p>libcef.lib - file</p><p>libEGL.dll - file</p><p>libGLESv2.dll - file</p><p>liblcl.dll - file</p><p>resources.pak - file</p><p>snapshot_blob.bin - file</p><p>v8_context_snapshot.bin - file</p><p>vk_swiftshader.dll - file</p><p>vk_swiftshader_icd.json - file</p><p>vulkan-1.dll - file</p></blockquote></blockquote>",2),h=e("h3",{id:"macos-x",tabindex:"-1"},[n("MacOS X "),e("a",{class:"header-anchor",href:"#macos-x","aria-label":'Permalink to "MacOS X"'},"​")],-1),u=e("ol",null,[e("li",null,"Create a new folder ChromiumDemo (choose the folder name yourself)"),e("li",null,"CEF: Extract the 'internal' files from the Release directory to the ChromiumDemo folder"),e("li",null,"Energy: Extract the dynamic link library to the ChromiumDemo folder"),e("li",null,"Final directory structure")],-1),b=e("blockquote",null,[e("p",null,"Different versions may have different files"),e("blockquote",null,[e("p",null,"Chromium Embedded Framework.framework - folder"),e("p",null,"cef_sandbox.a - file"),e("p",null,"liblcl.dylib - file")])],-1),f=a('<h4 id="mac-m1-m2" tabindex="-1">Mac M1 M2 <a class="header-anchor" href="#mac-m1-m2" aria-label="Permalink to &quot;Mac M1 M2&quot;">​</a></h4><blockquote><p>Mac ARM (M1, M2) architecture, development environment is the same as Mac AMD64 On Mac ARM Go, cross compilation is required, with the Go compilation environment set to amd64 and CGO support Running AMD architecture applications compatible with Rosetta2 Additional installation required</p><ol><li>GCC<code>brew install gcc</code>, You may also need to install <code>xcode-select --install</code></li><li>Rosetta2 <a href="https://support.apple.com/zh-cn/HT211861" target="_blank" rel="noreferrer">Reference link</a></li></ol><p>Compilation Environment Settings</p><ul><li>Cross environment: <code>GOARCH=amd64</code></li><li>Enable CGO: <code>CGO_ENABLED=1</code></li></ul></blockquote><h3 id="environmental-configuration" tabindex="-1">Environmental configuration <a class="header-anchor" href="#environmental-configuration" aria-label="Permalink to &quot;Environmental configuration&quot;">​</a></h3><blockquote><p>ENERGY_HOME Environmental</p><blockquote><p>ENERGY_ HOME is the development environment variable for Energy, and running the application during development will search for the framework directory from the environment variable You can also manually specify the framework directory through Go code without configuring environment variables <code>app.SetFrameworkDirPath</code></p></blockquote></blockquote><h1 id="command-line-automatic-installation-rendering" tabindex="-1">Command line automatic installation rendering <a class="header-anchor" href="#command-line-automatic-installation-rendering" aria-label="Permalink to &quot;Command line automatic installation rendering&quot;">​</a></h1><h2 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h2><p><img src="https://assets.yanghy.cn/energy-doc/cmd-install.gif" alt="Description"></p>',7);function g(v,y,k,_,q,w){const o=r("font");return d(),s("div",null,[m,e("blockquote",null,[e("p",null,[n("Download "),t(o,{color:"red"},{default:l(()=>[n("CEF & Energy")]),_:1}),n(" Corresponding version of dynamic link library compression package")]),p]),h,e("blockquote",null,[e("p",null,[n("Download "),t(o,{color:"red"},{default:l(()=>[n("CEF & Energy")]),_:1}),n(" Corresponding version of dynamic link library compression package")]),u,b]),f])}const x=i(c,[["render",g]]);export{C as __pageData,x as default};
