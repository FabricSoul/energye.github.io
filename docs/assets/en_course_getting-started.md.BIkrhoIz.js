import{_ as t,a as e,b as a,c as i}from"./chunks/dir_struct.DGGwymdq.js";import{_ as r,c as o,o as n,a4 as l}from"./chunks/framework.D5tr8Gic.js";const k=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{},"headers":[],"relativePath":"en/course/getting-started.md","filePath":"en/course/getting-started.md","lastUpdated":1725890410000}'),d={name:"en/course/getting-started.md"},c=l('<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><h3 id="development-environment-installation" tabindex="-1">Development environment installation <a class="header-anchor" href="#development-environment-installation" aria-label="Permalink to &quot;Development environment installation&quot;">​</a></h3><ul><li><a href="/en/course/install-env">Tutorial link</a></li></ul><h3 id="create-application" tabindex="-1">Create Application <a class="header-anchor" href="#create-application" aria-label="Permalink to &quot;Create Application&quot;">​</a></h3><ul><li>cmd: <code>energy init</code></li><li>run cmd -- 1. Input app name -- 2. Select HTTP</li><li>Waiting for automatic creation and initialization of projects and dependency configurations</li><li></li></ul><h4 id="input-app-name" tabindex="-1">Input app name <a class="header-anchor" href="#input-app-name" aria-label="Permalink to &quot;Input app name&quot;">​</a></h4><p><img src="'+t+'" alt="init_name"></p><h4 id="select-resource-load-options" tabindex="-1">Select resource load options <a class="header-anchor" href="#select-resource-load-options" aria-label="Permalink to &quot;Select resource load options&quot;">​</a></h4><p><img src="'+e+'" alt="init_http"></p><h4 id="enter-waiting" tabindex="-1">Enter，waiting <a class="header-anchor" href="#enter-waiting" aria-label="Permalink to &quot;Enter，waiting&quot;">​</a></h4><p><img src="'+a+'" alt="init_success"></p><h3 id="run-app" tabindex="-1">Run app <a class="header-anchor" href="#run-app" aria-label="Permalink to &quot;Run app&quot;">​</a></h3><h4 id="_1-enter-the-project-directory" tabindex="-1">1. Enter the project directory <a class="header-anchor" href="#_1-enter-the-project-directory" aria-label="Permalink to &quot;1. Enter the project directory&quot;">​</a></h4><h4 id="_2-run-go-cmd-go-run-main-go" tabindex="-1">2. run go cmd: <code>go run main.go</code> <a class="header-anchor" href="#_2-run-go-cmd-go-run-main-go" aria-label="Permalink to &quot;2. run go cmd: `go run main.go`&quot;">​</a></h4><h4 id="linux-arm-64" tabindex="-1">Linux-ARM(64) <a class="header-anchor" href="#linux-arm-64" aria-label="Permalink to &quot;Linux-ARM(64)&quot;">​</a></h4><blockquote><ol><li><code>export LD_PRELOAD=&quot;$ENERGY_HOME/libcef.so&quot;</code></li><li><code>go run main.go</code></li></ol></blockquote><h3 id="directory-structure" tabindex="-1">directory structure <a class="header-anchor" href="#directory-structure" aria-label="Permalink to &quot;directory structure&quot;">​</a></h3><p><img src="'+i+'" alt="dir_struct"></p><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>DESC</th></tr></thead><tbody><tr><td>resources</td><td>folder</td><td>The resource storage directory is created during initialization and can be customized or deleted</td></tr><tr><td>energy.json</td><td>file</td><td>Project configuration file, created at initialization, file name cannot be modified, used for building and creating installation packages.</td></tr><tr><td>go.mod, go.sum</td><td>file</td><td>Go module management, automatically generated</td></tr><tr><td>README.md</td><td>file</td><td>The project description file, created during initialization, describes the current directory structure</td></tr><tr><td>main.go</td><td>file</td><td>Energy Go applies the project main function to launch the entry file</td></tr></tbody></table><h3 id="mac-m1-m2" tabindex="-1">Mac M1 M2 <a class="header-anchor" href="#mac-m1-m2" aria-label="Permalink to &quot;Mac M1 M2&quot;">​</a></h3><blockquote><p>For the Mac ARM(M1, M2) architecture, the development environment is the same as for the Mac AMD64 In Mac ARM Go you need to use cross compilation, set the Go compilation environment to amd64, and CGO support Run AMD architecture applications with Rosetta2 compatibility Additional installation required</p><ol><li>GCC toolchain <code>brew install gcc</code>, Installation may also be required<code>xcode-select --install</code></li><li>Rosetta2 <a href="https://support.apple.com/en-us/102527" target="_blank" rel="noreferrer">Reference link</a></li></ol><p>Compilation environment setting</p><ul><li>Cross environment: <code>GOARCH=amd64</code></li><li>Open CGO: <code>CGO_ENABLED=1</code></li></ul></blockquote>',21),s=[c];function u(p,h,m,g,_,b){return n(),o("div",null,s)}const x=r(d,[["render",u]]);export{k as __pageData,x as default};
