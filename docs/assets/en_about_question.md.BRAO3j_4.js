import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.D5tr8Gic.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/about/question.md","filePath":"en/about/question.md","lastUpdated":1725890410000}'),n={name:"en/about/question.md"},l=e(`<h4 id="q-开发环境都需要什么" tabindex="-1">Q: 开发环境都需要什么? <a class="header-anchor" href="#q-开发环境都需要什么" aria-label="Permalink to &quot;Q: 开发环境都需要什么?&quot;">​</a></h4><ul><li>A1: energy开发环境自动安装 -- 1. Go开发环境 -- 2. Energy依赖的CEF二进制框架</li></ul><ol><li>安装Go环境, 在<a href="https://golang.google.cn/dl/" target="_blank" rel="noreferrer">Go官网</a>下载Go语言安装包 -- 下载指定系统平台的版本 -- 以window为例: --- 方式一 : 下载 gox.xx.x.windows-amd64.msi 一键安装 --- 方式二 : 解压Go的压缩包, 然后配置环境变量</li></ol><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GOROOT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/to/path/go&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 # </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 的安装位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GOPATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/to/path/gopath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             # </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 的开发目录，如果开启mod模式则不需要该变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%G</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">OROOT%/bin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  # 将环境变量加入路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#开启mod模块管理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w GO111MODULE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">on</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#配置代理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w GOPROXY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//goproxy.cn,direct</span></span></code></pre></div><ol start="2"><li><p>安装energy开发环境 <a>说明</a>：energy开发环境依赖，CEF,liblcl, Golang <a>注意</a>：energy打包后要和CEF必要文件在同一个目录，或者在开发时动态指定CEF目录. 开发环境使用energy命令行工具自动配置energy环境. 开发环境安装教程 -&gt; <a href="https://energy.yanghy.cn/course/100/63511b14a749ba0318943f3a" target="_blank" rel="noreferrer">传送门</a></p></li><li><p>Linux系统依赖于GTK3，有些系统可能未安装，我们需要手动安装.</p></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt-get install libgtk-3-dev</span></span></code></pre></div><h4 id="q-是否支持制作安装包" tabindex="-1">Q: 是否支持制作安装包？ <a class="header-anchor" href="#q-是否支持制作安装包" aria-label="Permalink to &quot;Q: 是否支持制作安装包？&quot;">​</a></h4><ul><li>A: 支持. <a href="https://energy.yanghy.cn/course/100/636e397ba749ba01d04ff595" target="_blank" rel="noreferrer">安装包制作教程</a></li></ul><hr><h4 id="q-怎么看是不是最新版本" tabindex="-1">Q: 怎么看是不是最新版本？ <a class="header-anchor" href="#q-怎么看是不是最新版本" aria-label="Permalink to &quot;Q: 怎么看是不是最新版本？&quot;">​</a></h4><ul><li>A: 在（Github <a href="https://github.com/energye/energy/releases" target="_blank" rel="noreferrer">Releases</a>）(Gitee <a href="https://gitee.com/energye/energy/releases" target="_blank" rel="noreferrer">发行版</a>) 版本号查看, 数字越大版本越新, 如有新版本发布建议更新最新版本.</li></ul><hr><h4 id="q-程序运行不起来" tabindex="-1">Q: 程序运行不起来？ <a class="header-anchor" href="#q-程序运行不起来" aria-label="Permalink to &quot;Q: 程序运行不起来？&quot;">​</a></h4><ul><li>A1: 检查是否使用最新版本，在mod中默认下载的依赖可能不是最新的。需要手动指定，</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">修改文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.mod</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">require github.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">energye</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">energy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v2 [最新的发行版本号]</span></span></code></pre></div><ul><li>A2: 开发环境是否正确配置, 参考 <a href="https://energy.yanghy.cn/course/100/63511b14a749ba0318943f3a" target="_blank" rel="noreferrer">环境安装</a></li><li>A3: MacOSX 需要在命令行参数中增加 env=dev, 例如使用Goland开发工具，编译main程序配置,在Program arguments中添加env=dev</li><li>A4: Linux比较特殊， 需要注意默认使用的VF(views framework)窗口组件，即无法使用LCL的任何组件，如果创建了LCL组件则程序启动失败。</li><li>A5: Linux ARM 需要预加载libcef.so库</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">运行程序之前，在命令行中增加该环境变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">export LD_PRELOAD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">libcef.so</span></span></code></pre></div><ul><li>A6: Linux ARM <span style="color:red;">undefined symbol: gbm_bo_map</span></li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sudo apt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get install libgbm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span></span></code></pre></div><hr><h4 id="q-是否使用module模块管理" tabindex="-1">Q: 是否使用module模块管理? <a class="header-anchor" href="#q-是否使用module模块管理" aria-label="Permalink to &quot;Q: 是否使用module模块管理?&quot;">​</a></h4><ul><li>A: 是, energy使用mod依赖管理, 如果不使用mod依赖管理，第三方包需要你自己动手下载导入.</li></ul><hr><h4 id="q-energy为什么在linux不支持lcl组件" tabindex="-1">Q: energy为什么在Linux不支持LCL组件 <a class="header-anchor" href="#q-energy为什么在linux不支持lcl组件" aria-label="Permalink to &quot;Q: energy为什么在Linux不支持LCL组件&quot;">​</a></h4><ul><li>A1: energy在Linux提供了2种支持，GTK2、GTK3，原因是CEF 106.1.1是最后一个默认支持GTK2的版本，大于CEF 106.1.1 默认支持的GTK3，Energy 支持LCL组件，但需要使用GTK2，但由于CEF在Linux中<code>无法输入中文</code>同时CEF版本107.xx以后<code>默认使用GTK3</code>而不是<code>GTK2</code>。 -- 2个问题 --- Linux GTK2 无法输入中文，可以使用LCL组件 --- Linux GTK3 可以输入中文，但无法使用LCL组件 <code>目前尚未解决GTK2不能输入中文问题。如果不介意可以直接使用GTK2（CEF106.1.1）</code><code>对于GTK3也是一个很好的选择，相比GTK2更好用。因为我们是做应用而不是浏览器。</code></li><li>A2: GTK3开发环境安装</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt-get install libgtk-3-dev</span></span></code></pre></div><hr><h4 id="q-linux-linux-aarch64" tabindex="-1">Q: Linux &amp; Linux-AArch64 <a class="header-anchor" href="#q-linux-linux-aarch64" aria-label="Permalink to &quot;Q: Linux &amp; Linux-AArch64&quot;">​</a></h4><ul><li>liblcl.so -- AMD架构在所有发行版中提供编译版本 -- AArch64架构在某些版本中会提供编译版本(目前仅提供在虚拟机中编译, 实体机中未测试)</li><li>GTK3 -- Linux和Linux-AArch64默认使用GTK3, 需要预先安装 <code>sudo apt-get install libgtk-3-dev</code></li><li>Linux-AArch64 -- 运行程序之前，在命令行中增加该环境变量 -- <code>export LD_PRELOAD=/to/path/libcef.so</code></li></ul>`,29),t=[l];function h(p,r,k,o,d,g){return a(),i("div",null,t)}const u=s(n,[["render",h]]);export{E as __pageData,u as default};
